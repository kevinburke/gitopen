#!/usr/bin/env python
import argparse
import os
import subprocess
import sys
import re
from pathlib import Path

def _get_config_path():
    """Get the config file path respecting XDG conventions"""
    xdg_config_home = os.environ.get('XDG_CONFIG_HOME')
    if xdg_config_home:
        config_dir = Path(xdg_config_home)
    else:
        config_dir = Path.home() / '.config'

    return config_dir / 'gitopen.conf'

def _parse_config():
    """Parse config file as simple key=value (TOML-compatible syntax)"""
    config_path = _get_config_path()
    config = {
        'browser': 'Google Chrome',
        'profile': None,
    }

    if not config_path.exists():
        return config

    try:
        with open(config_path, 'r') as f:
            for line in f:
                line = line.strip()
                # Skip empty lines and comments
                if not line or line.startswith('#'):
                    continue
                # Simple key = value parser
                if '=' in line:
                    key, value = line.split('=', 1)
                    key = key.strip()
                    value = value.strip().strip('"').strip("'")
                    if key == 'browser':
                        config['browser'] = value
                    elif key == 'profile':
                        config['profile'] = value
    except Exception as e:
        sys.stderr.write("Warning: Could not parse config file {}: {}\n".format(
            config_path, e))

    return config

def _get_remote_url(remote_name):
    """ Retrieve the remote URL from a remote name like 'upstream' """
    cmd = "git config --get remote.{}.url".format(remote_name)
    try:
        remote_url = subprocess.check_output(cmd, shell=True)
    except subprocess.CalledProcessError:
        sys.stderr.write("Couldn't find a remote named {}\n".format(
            remote_name))
        sys.exit(1)
    return remote_url


def _parse_git_remote_url(url):
    """Parse Git remote URL's into a SRE_Match object
    
    Matches user@<hostname>:<web_user>/<user_repo>
    or      git://<hostname>/<web_user>/<user_repo>
    """
    ssh_regex = re.compile(r"""
                           ^(
                                (?P<git_user>\S+)@   # match user@ ssh url's
                                |
                                git://               # match git read-only url's
                                |
                                https://
                           )
                           (?P<host>[^/:]+) # hostname
                           [:/]             # separator
                           (
                               (
                                (?P<user>[^/]+)/
                               )?
                               (?P<repo_name>.+?)
                           )
                           (\.git)?$
                           """, re.X)
    try:
        return ssh_regex.match(str(url, 'utf-8'))
    except Exception: # Python 2
        return ssh_regex.match(str(url))


def _get_branch():
    cmd = "git rev-parse --symbolic-full-name --abbrev-ref HEAD"
    return subprocess.check_output(cmd, shell=True).decode('utf-8').strip()

# match both github.com and github.com-blah (the latter is used as an SSH alias
# if you have multiple hosts)
def _get_host(rawhost):
    match = re.search(r'(?P<host>.+?)-\S+$', rawhost)
    if match:
        return match.group('host')
    return rawhost

def _open_commit(url: str, commit: str, config=None, profile_override=None):
    if 'googlesource.com' in str(url):
        _open_url("{}/+/{}".format(url, commit), config, profile_override)
    elif 'bitbucket.org' in str(url):
        _open_url("{}/commits/{}".format(url, commit), config, profile_override)
    else:
        _open_url("{}/commit/{}".format(url, commit), config, profile_override)

def _open_url(url: str, config=None, profile_override=None):
    # Would like to use webbrowser but sometimes it just fails.
    url = url.strip()

    # Determine if we should use a specific browser with profile
    if config is None:
        config = _parse_config()

    profile = profile_override if profile_override else config.get('profile')

    if profile:
        browser = config.get('browser', 'Google Chrome')
        # Build the open command with Chrome profile
        cmd = 'open -na "{browser}" --args --profile-directory="{profile}" --new-tab "{url}"'.format(
            browser=browser,
            profile=profile,
            url=url
        )
        os.system(cmd)
    else:
        # Use default system browser
        os.system("open '{url}'".format(url=url))

    sys.exit(0)

def main(args):
    # Load config once
    config = _parse_config()
    profile_override = getattr(args, 'profile', None)

    remote_url = _get_remote_url(args.remote_name).strip()
    match = _parse_git_remote_url(remote_url)

    if match is None:
        raise ValueError("Couldn't parse {url} as a git remote".format(url=remote_url))
    host = _get_host(match.group('host'))
    if b'googlesource.com' in remote_url:
        url = remote_url.decode('utf-8')
    else:
        url = "".join(["https://", host, '/', match.group('user'), '/',
                       match.group('repo_name')])

    if args.branch is None or (args.branch and args.branch is sentinel):
        branch = _get_branch()
    else:
        branch = args.branch

    if args.pulls and args.pull:
        raise ValueError("Cannot specify both --pulls and --pull flags")
    if args.pulls and args.pr is not None:
        raise ValueError("Cannot specify both --pulls and --pr flags")
    if args.pull and args.pr is not None:
        raise ValueError("Cannot specify both --pull and --pr flags")

    if args.pulls:
        if 'gitlab' in url:
            _open_url(url + "/merge_requests", config, profile_override)
        else:
            _open_url(url + "/pulls", config, profile_override)
    elif args.tree is not None:
        # TODO get root & cwd and compute difference between them.
        _open_url("{url}/tree/{branch}/{tree}".format(url=url, branch=branch,
                                                      tree=args.tree), config, profile_override)
    elif args.compare:
        _open_url(url + "/compare", config, profile_override)
    elif args.actions:
        _open_url(url + "/actions", config, profile_override)
    elif args.branch and not args.tip:
        _open_url("{}/tree/{}".format(url, branch), config, profile_override)
    elif args.issues:
        _open_url(url + "/issues", config, profile_override)
    elif args.commits:
        _open_url(url + "/commits", config, profile_override)
    elif args.commit:
        _open_commit(url, args.commit, config, profile_override)
    elif args.tip:
        commit = subprocess.check_output(
            "git rev-parse {}".format(branch or "HEAD"), shell=True).strip()
        _open_commit(url, commit, config, profile_override)

    if args.pr is not None and args.pr < 0:
        raise ValueError("Cannot specify a negative number for --pr")

    if args.pr is not None and args.pr > 0:
        _open_url(url + "/pull/" + str(args.pr), config, profile_override)

    if args.pull:
        branch = _get_branch()
        if args.pull != 'origin':
            upstream_url = _get_remote_url(args.pull).decode('utf-8')
            upstream_match = _parse_git_remote_url(upstream_url)
            upstream_remote_branch = '{}:master'.format(upstream_match.group('user'))
        else:
            upstream_remote_branch = 'master'
        if 'github.com' in url:
            # https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/using-query-parameters-to-create-a-pull-request
            _open_url(url + "/compare/{}...{}?quick_pull=1".format(upstream_remote_branch, branch), config, profile_override)
        elif 'bitbucket.org' in url:
            # https://bitbucket.org/inconshreveable/ngrok/pull-requests/new?source=use-correct-css-class&t=1
            _open_url("{}/pull-requests/new?source={}&t=1".format(url, branch), config, profile_override)
        elif 'gitlab' in url:
            # https://gitlab.com/software/app/merge_requests/new?merge_request[source_branch]=branch-name
            _open_url("{}/merge_requests/new?merge_request[source_branch]={}".format(url, branch), config, profile_override)
        else:
            _open_url(url + "/pull/new/{}".format(branch), config, profile_override)

    _open_url(url, config, profile_override)

if __name__ == '__main__':
    sentinel = object()

    parser = argparse.ArgumentParser(description="Get the git remote")
    parser.add_argument('remote_name', type=str, default='origin', nargs='?',
                        help="Name of the remote to open (defaults to origin)")
    parser.add_argument('-b', '--branch', nargs='?', const=sentinel,
                        help=('open the current branch in the browser'))
    parser.add_argument('-a', '--actions', nargs='?', const=sentinel,
                        help=('Open the actions homepage in the browser'))
    parser.add_argument('-e', '--tree', default=None,
                        help=('Open the tree at the specified folder/file'))
    parser.add_argument('-r', '--compare', action='store_true', 
                        help=('Open the compare view'))
    parser.add_argument('-s', '--pulls', action='store_true', 
                        help=('Open the pull requests list'))
    parser.add_argument('-i', '--issues', action='store_true', 
                        help=('Open the issues page'))
    parser.add_argument('-u', '--pr', type=int,
                        help=('Open a pull request'))
    parser.add_argument('-t', '--tip', action='store_true', 
                        help=('Open the latest commit (works with --branch as well)'))
    parser.add_argument('-c', '--commits', action='store_true', 
                        help=('Open the commits list'))
    parser.add_argument('--commit', default=None,
                        help=('Open a single commit'))
    parser.add_argument('-p', '--pull', nargs='?', default=None, const='origin',
                        help=('Open a pull request for the current branch. '
                              'Defaults to a pull request against the '
                              'remote_name remote.'))
    parser.add_argument('--profile', default=None,
                        help=('Chrome/Chromium profile directory to use '
                              '(e.g., "Profile 1"). Overrides config file.'))
    main_args = parser.parse_args()
    main(main_args)
